{"remainingRequest":"/home/pkgship/web-ui/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/pkgship/web-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/pkgship/web-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pkgship/web-ui/src/views/home/binary-info.vue?vue&type=template&id=6a7974e4&scoped=true&","dependencies":[{"path":"/home/pkgship/web-ui/src/views/home/binary-info.vue","mtime":1650609479736},{"path":"/home/pkgship/web-ui/node_modules/cache-loader/dist/cjs.js","mtime":1650610399395},{"path":"/home/pkgship/web-ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1650610401303},{"path":"/home/pkgship/web-ui/node_modules/cache-loader/dist/cjs.js","mtime":1650610399395},{"path":"/home/pkgship/web-ui/node_modules/vue-loader/lib/index.js","mtime":1650610401303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}