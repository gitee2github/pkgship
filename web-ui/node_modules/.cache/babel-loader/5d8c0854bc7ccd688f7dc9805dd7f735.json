{"remainingRequest":"/home/pkgship/web-ui/node_modules/babel-loader/lib/index.js!/home/pkgship/web-ui/node_modules/eslint-loader/index.js??ref--13-0!/home/pkgship/web-ui/src/api/sig.js","dependencies":[{"path":"/home/pkgship/web-ui/src/api/sig.js","mtime":1650619059833},{"path":"/home/pkgship/web-ui/babel.config.js","mtime":1650609479672},{"path":"/home/pkgship/web-ui/node_modules/cache-loader/dist/cjs.js","mtime":1650610399395},{"path":"/home/pkgship/web-ui/node_modules/babel-loader/lib/index.js","mtime":1650610399223},{"path":"/home/pkgship/web-ui/node_modules/eslint-loader/index.js","mtime":1650610400143}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CgovKioKICogQGZpbGUgIOS/oeaBr+euoeeQhuaOpeWPo+mFjee9ruaWh+S7tgogKiAqLwppbXBvcnQgYXBwQWpheCBmcm9tICcuLy4uL2xpYnMvYWpheC11dGlscyc7CmV4cG9ydCB2YXIgZ2V0U2lnSW5mbyA9IGZ1bmN0aW9uIGdldFNpZ0luZm8oc2lnX25hbWUpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgYXBwQWpheC5wb3N0SnNvbih7CiAgICAgIHVybDogJy9pbmZvQm9hcmQvc2lnJywKICAgICAgdHlwZTogJ2dldCcsCiAgICAgIHBhcmFtczogewogICAgICAgIHNpZ19uYW1lOiBzaWdfbmFtZQogICAgICB9LAogICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHJlamVjdChyZXN1bHQpOwogICAgICB9LAogICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IobXNnKSB7CiAgICAgICAgcmVqZWN0KG1zZyk7CiAgICAgIH0KICAgIH0pOwogIH0pOwp9OwpleHBvcnQgdmFyIGdldFNpZ0Rvd24gPSBmdW5jdGlvbiBnZXRTaWdEb3duKF9yZWYpIHsKICB2YXIgc2lnX25hbWUgPSBfcmVmLnNpZ19uYW1lOwogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBhcHBBamF4LnBvc3RKc29uKHsKICAgICAgdXJsOiAnL2luZm9Cb2FyZC9zaWcvZXhwb3J0JywKICAgICAgdHlwZTogJ3Bvc3QnLAogICAgICByZXNwb25zZVR5cGU6ICdibG9iJywKICAgICAgZGF0YTogewogICAgICAgIHNpZ19uYW1lOiBzaWdfbmFtZQogICAgICB9LAogICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHJlamVjdChyZXN1bHQpOwogICAgICB9LAogICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IobXNnKSB7CiAgICAgICAgcmVqZWN0KG1zZyk7CiAgICAgIH0KICAgIH0pOwogIH0pOwp9Ow=="},{"version":3,"sources":["/home/pkgship/web-ui/src/api/sig.js"],"names":["appAjax","getSigInfo","sig_name","Promise","resolve","reject","postJson","url","type","params","success","result","error","msg","getSigDown","responseType","data"],"mappings":";;AAAA;AACA;AACA;AAEC,OAAOA,OAAP,MAAoB,sBAApB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,OAAO,CAACM,QAAR,CAAiB;AACbC,MAAAA,GAAG,EAAE,gBADQ;AAEbC,MAAAA,IAAI,EAAE,KAFO;AAGbC,MAAAA,MAAM,EAAE;AACLP,QAAAA,QAAQ,EAARA;AADK,OAHK;AAMbQ,MAAAA,OANa,mBAMLC,MANK,EAMG;AACZ,YAAIA,MAAJ,EAAY;AACRP,UAAAA,OAAO,CAACO,MAAD,CAAP;AACA;AACH;;AACDN,QAAAA,MAAM,CAACM,MAAD,CAAN;AACH,OAZY;AAabC,MAAAA,KAba,iBAaPC,GAbO,EAaF;AACPR,QAAAA,MAAM,CAACQ,GAAD,CAAN;AACH;AAfY,KAAjB;AAmBH,GApBM,CAAP;AAqBH,CAtBM;AAwBP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAEM;AAAA,MADFZ,QACE,QADFA,QACE;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,OAAO,CAACM,QAAR,CAAiB;AACbC,MAAAA,GAAG,EAAE,uBADQ;AAEbC,MAAAA,IAAI,EAAE,MAFO;AAGbO,MAAAA,YAAY,EAAE,MAHD;AAIbC,MAAAA,IAAI,EAAE;AACFd,QAAAA,QAAQ,EAARA;AADE,OAJO;AAObQ,MAAAA,OAPa,mBAOLC,MAPK,EAOG;AACZ,YAAIA,MAAJ,EAAY;AACRP,UAAAA,OAAO,CAACO,MAAD,CAAP;AACA;AACH;;AACDN,QAAAA,MAAM,CAACM,MAAD,CAAN;AACH,OAbY;AAcbC,MAAAA,KAda,iBAcPC,GAdO,EAcF;AACPR,QAAAA,MAAM,CAACQ,GAAD,CAAN;AACH;AAhBY,KAAjB;AAoBH,GArBM,CAAP;AAsBH,CAzBO","sourcesContent":["/**\n * @file  信息管理接口配置文件\n * */\n\n import appAjax from './../libs/ajax-utils';\n \n export const getSigInfo = (sig_name) => {\n     return new Promise((resolve, reject) => {\n         appAjax.postJson({\n             url: '/infoBoard/sig',\n             type: 'get',\n             params: {\n                sig_name\n             },\n             success(result) {\n                 if (result) {\n                     resolve(result);\n                     return;\n                 }\n                 reject(result);\n             },\n             error(msg) {\n                 reject(msg);\n             }\n \n         });\n \n     });\n };\n\n export const getSigDown = ({\n                               sig_name\n                           }) => {\n    return new Promise((resolve, reject) => {\n        appAjax.postJson({\n            url: '/infoBoard/sig/export',\n            type: 'post',\n            responseType: 'blob',\n            data: {\n                sig_name\n            },\n            success(result) {\n                if (result) {\n                    resolve(result);\n                    return;\n                }\n                reject(result);\n            },\n            error(msg) {\n                reject(msg);\n            }\n\n        });\n\n    });\n};"]}]}